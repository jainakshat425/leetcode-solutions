class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        DisjointSet disjointSet = new DisjointSet(n);
        
        // Group nodes of each component by a parent node using union
        for(int i=0; i<n; i++) {
            for(int j=i+1; j<n; j++) {
                if( graph[i][j] == 1 ) 
                    disjointSet.union(i, j);
            }
        }
        
        // Find the no. of infected nodes in each component
        int[] infected = new int[n];
        for(int node : initial) {
            int root = disjointSet.find(node);
            infected[root]++;
        }
        
        int ansNode = -1;
        int maxSize = -1;
        int minNode = Integer.MAX_VALUE;
        
        for(int node : initial) {
            int root = disjointSet.find(node);
            
            if( infected[root] == 1 ) {
                int size = disjointSet.size(root);

                if( size > maxSize ) {
                    maxSize = size;
                    ansNode = node;
                } else if( size == maxSize && node < ansNode ) {
                    ansNode = node;
                }
            }
            
            minNode = Math.min(minNode, node);
        }
        return ansNode != -1 ? ansNode : minNode;
    }
}
class DisjointSet {
    private int[] parent;
    private int[] size;
    
    public DisjointSet(int n) {
        parent = new int[n];
        size = new int[n];
        
        for(int i=0; i<n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }
    
    public int find(int node) {
        if( parent[node] != node ) 
            parent[node] = find(parent[node]);
        return parent[node];
    }
    
    public void union(int node1, int node2) {
        int par1 = find(node1);
        int par2 = find(node2);
        
        if( size[par2] > size[par1] ) {
            parent[par1] = par2;
            size[par2] += size[par1];
        } else {
            parent[par2] = par1;
            size[par1] += size[par2];
        }
    }
    
    public int size(int node) {
        return size[find(node)];
    }
}
